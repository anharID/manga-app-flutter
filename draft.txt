Container(
                        margin: EdgeInsets.only(top: 20),
                        child: FutureBuilder<List<MangaCharacter>>(
                          future: character,
                          builder: (context, snapshot) {
                            if (snapshot.hasData) {
                              return GridView.builder(
                                shrinkWrap: true,
                                itemCount: snapshot.data!.length,
                                itemBuilder:
                                    (BuildContext context, int index) =>
                                        GestureDetector(
                                  onTap: () {
                                    Navigator.push(
                                        context,
                                        MaterialPageRoute(
                                            builder: (context) => CharacterList(
                                                id: snapshot
                                                    .data![index].caracterId,
                                                manga: snapshot
                                                    .data![index].name)));
                                  },
                                  child: CardView(
                                    mangaImage: snapshot.data![index].imgUrl,
                                    mangaTitle: snapshot.data![index].name,
                                  ),
                                ),
                                gridDelegate:
                                    const SliverGridDelegateWithFixedCrossAxisCount(
                                        crossAxisCount: 3),
                              );
                            }
                            return const Text("Loading");
                          },
                        ),
                      )

class MangaCharacter {
  final String name;
  final String imgUrl;
  final int caracterId;

  MangaCharacter({
    required this.name,
    required this.imgUrl,
    required this.caracterId,
  });
  factory MangaCharacter.fromJson(Map<String, dynamic> json) {
    return MangaCharacter(
        caracterId: json['mal_id'],
        name: json['name'],
        imgUrl: json['image_url']);
  }
}

Future<List<MangaCharacter>> fetchMangaCharacter(malId) async {
  final response = await http
      .get(Uri.parse('https://api.jikan.moe/v3/manga/$malId/characters'));

  if (response.statusCode == 200) {
    final List characterJson = jsonDecode(response.body)['recommendations'];

    return characterJson
        .map((character) => MangaCharacter.fromJson(character))
        .toList();
  } else {
    throw Exception('Failed to load character');
  }
}

=============================================================================

